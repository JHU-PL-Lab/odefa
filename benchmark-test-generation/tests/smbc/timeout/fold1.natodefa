# EXPECT-WELL-FORMED
# EXPECT-INPUT-SEQUENCES-REACH target [ 0 ]

let ans1 = input % 3 in
let ans2 = input % 3 in
let ans3 = input % 3 in
let ans4 = input % 3 in
let ans5 = input % 3 in
let ans6 = input % 3 in
let ans7 = input % 3 in
let ans8 = input % 3 in
let ans9 = input % 3 in

let f a elm =
  if a % 3 == 0 then
    if      elm % 3 == 0 then ans1
    else if elm % 3 == 1 then ans2
    else                      ans3
  else if a % 3 == 1 then
    if      elm % 3 == 0 then ans4
    else if elm % 3 == 1 then ans5
    else                      ans6
  else
    if      elm % 3 == 0 then ans7
    else if elm % 3 == 1 then ans8
    else                      ans9
  in

let none = {last = true} in

# l0 = [0; 1; 2; 3]
let a3 =  {last = false, elem = 3, next = none} in
let a2 =  {last = false, elem = 2, next = a3} in
let a1 =  {last = false, elem = 1, next = none} in
let l0 =  {last = false, elem = 0, next = a1} in

# l1 = [1; 2; 3; 4]
let b3 =  {last = false, elem = 4, next = none} in
let b2 =  {last = false, elem = 3, next = b3} in
let b1 =  {last = false, elem = 2, next = none} in
let l1 =  {last = false, elem = 1, next = b1} in

# l2 = [0; 1; 2; 3; 4; 5]
let c5 =  {last = false, elem = 5, next = none} in
let c4 =  {last = false, elem = 4, next = c5} in
let c3 =  {last = false, elem = 3, next = c4} in
let c2 =  {last = false, elem = 2, next = c3} in
let c1 =  {last = false, elem = 1, next = c2} in
let l2 =  {last = false, elem = 0, next = c1} in

# l3 = [1; 2; 3; 4; 5; 6]
let d5 =  {last = false, elem = 6, next = none} in
let d4 =  {last = false, elem = 5, next = d5} in
let d3 =  {last = false, elem = 4, next = d4} in
let d2 =  {last = false, elem = 3, next = d3} in
let d1 =  {last = false, elem = 2, next = d2} in
let l3 =  {last = false, elem = 1, next = d1} in

let rec fold acc lst =
  if lst.last then
    acc
  else
    let acc2 = f acc (lst.elem) in
    fold acc2 (lst.next)
  in

let acc_init = input % 3 in

if not ((fold acc_init l0) == (fold acc_init l1)) then
  let target = 1 in 1
else
  0