# EXPECT-WELL-FORMED
# EXPECT-INPUT-SEQUENCES-REACH target [5, 9, -4, 1] [5, 9, 0, -4, 1]
# EXPECT-REQUIRED-INPUT-SEQUENCE-GENERATION-STEPS 20000

let x = input in 
let y = input in

let none = {last = true} in

let rec list_build acc = 
  let x = input in
  if 0 == x then
    acc
  else
    let new_acc = {last = false, elem = x, next = acc} in
    list_build new_acc
in

let rec list_map f l =
  let rec lp lst =
    if lst.last then
      lst
    else
      let next_mapped = lp (lst.next) in
      {last = false, elem = f (lst.elem), next = next_mapped}
    in
  lp l
in

let rec list_at r i = 
  if i == 0 then
    r.elem
  else (
    let next_r = r.next in
    let sub_i = i - 1 in
      list_at next_r sub_i
  )
  in

let lst = list_build none in
let make_adder s a = a + s in
let adder = make_adder y in
let lst2 = list_map adder lst in

let v0 = list_at lst2 0 in
# let v1 = list_at lst2 1 in

if (v0 == x)
  and (5 <= x)
  and (8 < y)
  #and ab.next.elem == x1
  #and ab.next.next.elem == x2
  #and ab.next.next.next.elem == x3
  #and ab.next.next.next.next.elem == x4
then
  let target = 1 in 1
else
  0
