# EXPECT-EVALUATE
# EXPECT-IOTA {x -> 5, }

# let rec sum = fun number ->
#   if number = 0 then
#     0
#   else
#     (sum (number - 1)) + number
# in
# sum 5 (* => 15 *)
# will reach b if z = true, so when r = 15, so when x = 5

x = input;
zero = 0;
one = 1;
five = 5;
fifteen = 15;

sum = fun number -> (
  boolNumberequal0 = number < zero;
  sumresult = boolNumberequal0 ~ true
                      ? fun numberequal0match -> (
                        numberequal0matchresult = zero;
                      )
                      : fun numberequal0antimatch -> (
                        numberminus1 = number - one;
                        partialsum = sum numberminus1;
                        numberequal0antimatchresult = partialsum + number;
                      );
);

r = sum x; # => 15

boolZ = r == fifteen;
final = boolZ ~ true ? fun a -> (b = a) : fun c -> (d = c);

q=b;
