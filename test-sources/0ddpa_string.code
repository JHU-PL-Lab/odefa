# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-ANALYSIS-STACK-IS 0ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END spatternmatch {int}
# EXPECT-ANALYSIS-LOOKUP-FROM-END s0cpatternmatch {int, false}
# EXPECT-ANALYSIS-LOOKUP-FROM-END s0spacepatternmatch {int, false}
# EXPECT-ANALYSIS-LOOKUP-FROM-END s6spacepatternmatch {int, false}
# EXPECT-ANALYSIS-LOOKUP-FROM-END s12hpatternmatch {int, false}
# EXPECT-ANALYSIS-LOOKUP-FROM-END s13emptypatternmatch {int, false}
# EXPECT-ANALYSIS-LOOKUP-FROM-END schunckytempehpatternmatch {int, false}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# String pattern match.

#    0123456789012
s = "chucky tempeh";

spatternmatch = s ~ string
                    ? fun smatch -> (
                      smatchreturn = 0;
                    )
                    : fun santimatch -> (
                      santimatchreturn = s s;
                    );

# String indexing and equality.

zero = 0;
six = 6;
twelve = 12;
thirteen = 13;

c = "c";
h = "h";
space = " ";
empty = "";

s0 = s.(zero);
s0c = s0 == c;
s0cpatternmatch = s0c ~ true
                    ? fun s0cmatch -> (
                      s0cmatchreturn = 0;
                    )
                    : fun s0cantimatch -> (
                      s0cantimatchreturn = false;
                    );

s0space = s0 == space;
s0spacepatternmatch = s0space ~ true
                    ? fun s0spacematch -> (
                      s0spaceantimatchreturn = false;
                    )
                    : fun s0spaceantimatch -> (
                      s0spacematchreturn = 0;
                    );

s6 = s.(six);
s6space = s6 == space;
s6spacepatternmatch = s6space ~ true
                    ? fun s6spacematch -> (
                      s6spacematchreturn = 0;
                    )
                    : fun s6spaceantimatch -> (
                      s6spaceantimatchreturn = false;
                    );

s12 = s.(twelve);
s12h = s12 == h;
s12hpatternmatch = s12h ~ true
                    ? fun s12hmatch -> (
                      s12hmatchreturn = 0;
                    )
                    : fun s12hantimatch -> (
                      s12hantimatchreturn = false;
                    );

s13 = s.(thirteen);
s13empty = s13 == empty;
s13emptypatternmatch = s13empty ~ true
                    ? fun s13emptymatch -> (
                      s13emptymatchreturn = 0;
                    )
                    : fun s13emptyantimatch -> (
                      s13emptyantimatchreturn = false;
                    );

# String concatenation.

chuncky = "chuncky";
tempeh = "tempeh";

chunckyspace = chuncky + space;
chunckytempeh = chunckyspace + tempeh;

schunckytempeh = s == chunckytempeh;
schunckytempehpatternmatch = schunckytempeh ~ true
                    ? fun schunckytempehmatch -> (
                      schunckytempehantimatchreturn = false;
                    )
                    : fun schunckytempehantimatch -> (
                      schunckytempehmatchreturn = 0;
                    );
