# EXPECT-WELL-FORMED
# EXPECT-EVALUATE
# EXPECT-ANALYSIS-STACK-IS 0ddpa
# EXPECT-ANALYSIS-LOOKUP-FROM-END r {int}
# EXPECT-ANALYSIS-NO-INCONSISTENCIES

# let rec sum = fun number ->
#   if number = 0 then
#     0
#   else
#     (sum (number - 1)) + number
# in
# sum 5 (* => 15 *)

zero = 0;
one = 1;
five = 5;

sum0f = fun sum0 -> (
    sum0fr = fun number -> (
        numberequal0 = number == zero;
        sumresult = numberequal0
                      ? (
                        numberequal0matchresult = zero;
                      )
                      : (
                        numberminus1 = number - one;
                        sum0sum0 = sum0 sum0;
                        partialsum = sum0sum0 numberminus1;
                        numberequal0antimatchresult = partialsum + number;
                      );
        );
);

sum = sum0f sum0f;

r = sum five; # => 15
